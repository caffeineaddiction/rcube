// Generated by CoffeeScript 1.12.3
(function() {
  var objCube, objFace;

  objFace = (function() {
    function objFace(Cube, argBlocks) {
      var i, n;
      this.Cube = Cube;
      this.links = {};
      if (toString.call(argBlocks) === '[object Array]') {
        this.blocks = tArray;
      } else {
        this.blocks = [];
        for (n = i = 0; i <= 8; n = ++i) {
          this.blocks.push(n);
        }
      }
      return this;
    }

    return objFace;

  })();

  objCube = (function() {
    function objCube(argCube) {
      switch (toString.call(argCube)) {
        case '[object String]':
          this.importString(argCube);
          break;
        case '[object Array]':
          this.importArray(argCube);
          break;
        case '[object Object]':
          return argCube;
        default:
          this.initCube();
      }
      return this;
    }

    objCube.prototype.initCube = function() {
      this.sides = {
        "R": new objFace(this),
        "L": new objFace(this),
        "B": new objFace(this),
        "D": new objFace(this),
        "F": new objFace(this),
        "U": new objFace(this)
      };
      this.bindFaces();
    };

    objCube.prototype.bindFaces = function() {
      this.sides["R"] = {
        "12": this.sides["U"]["03"],
        "09": this.sides["F"]["03"],
        "06": this.sides["D"]["03"],
        "03": this.sides["B"]["03"]
      };
      this.sides["L"] = {
        "12": this.sides["U"]["09"],
        "09": this.sides["B"]["09"],
        "06": this.sides["D"]["09"],
        "03": this.sides["F"]["09"]
      };
      this.sides["B"] = {
        "12": this.sides["D"]["06"],
        "09": this.sides["L"]["09"],
        "06": this.sides["U"]["12"],
        "03": this.sides["R"]["03"]
      };
      this.sides["D"] = {
        "12": this.sides["F"]["06"],
        "09": this.sides["L"]["06"],
        "06": this.sides["B"]["12"],
        "03": this.sides["R"]["06"]
      };
      this.sides["F"] = {
        "12": this.sides["U"]["06"],
        "09": this.sides["L"]["03"],
        "06": this.sides["D"]["12"],
        "03": this.sides["R"]["09"]
      };
      this.sides["U"] = {
        "12": this.sides["B"]["06"],
        "09": this.sides["L"]["12"],
        "06": this.sides["F"]["12"],
        "03": this.sides["R"]["12"]
      };
    };

    objCube.prototype.mutate = function(argMove) {
      switch (argMove) {
        case "R":
          pass;
          break;
        case "Ri":
          pass;
          break;
        case "L":
          pass;
          break;
        case "Li":
          pass;
          break;
        case "B":
          pass;
          break;
        case "Bi":
          pass;
          break;
        case "D":
          pass;
          break;
        case "Di":
          pass;
          break;
        case "F":
          pass;
          break;
        case "Fi":
          pass;
          break;
        case "U":
          pass;
          break;
        case "Ui":
          pass;
          break;
        default:
          modcontext(argMove);
      }
    };

    objCube.prototype.modcontext = function(argMove) {};

    objCube.prototype.importString = function(argString) {
      var i, j, tArray, tCube, tOut, tSide;
      tArray = argString.split('');
      tOut = [];
      for (tSide = i = 0; i <= 5; tSide = ++i) {
        tOut.push([]);
        for (tCube = j = 0; j <= 8; tCube = ++j) {
          tOut[tSide].push(tArray.pop());
        }
      }
      return this.importArray(tOut);
    };

    objCube.prototype.exportString = function() {};

    objCube.prototype.importArray = function(argArray) {
      var i, len, n;
      for (i = 0, len = argArray.length; i < len; i++) {
        n = argArray[i];
        this.sides.push(new objFace(this, n));
      }
    };

    objCube.prototype.exportArray = function() {};

    return objCube;

  })();

}).call(this);
